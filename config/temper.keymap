/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <6 6>;
            then-layer = <6>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        lhmr: lhmr {
            compatible = "zmk,behavior-hold-tap";
            label = "LHMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 6 7 8 16 17 18 26 27 28 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        rhmr: rhmr {
            compatible = "zmk,behavior-hold-tap";
            label = "RHMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <4 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q                 &kp W             &kp E             &kp R          &kp T      &kp Y        &kp U                &kp I              &kp O              &kp P
&lhmr LEFT_CONTROL A  &lhmr LEFT_ALT S  &lhmr LEFT_WIN D  &lhmr LSHFT F  &kp G      &kp H        &rhmr RIGHT_SHIFT J  &rhmr RIGHT_WIN K  &rhmr RIGHT_ALT L  &rhmr RCTRL SEMICOLON
&kp Z                 &kp X             &kp C             &kp V          &kp B      &kp N        &kp M                &kp COMMA          &kp DOT            &kp FSLH
                                        &lt 3 ESCAPE      &lt 1 SPACE    &lt 2 TAB  &lt 5 ENTER  &lt 4 BACKSPACE      &lt 6 DELETE
            >;
        };

        nav {
            bindings = <
&trans        &trans        &trans     &trans          &trans  &kp K_REDO    &kp K_PASTE    &kp K_COPY     &kp K_CUT    &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &kp CAPSLOCK  &kp LEFT       &kp UP         &kp DOWN     &kp RIGHT
&trans        &trans        &trans     &trans          &trans  &kp INSERT    &kp HOME       &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                            &trans     &trans          &trans  &kp ENTER     &kp BACKSPACE  &kp DELETE
            >;
        };

        mouse {
            bindings = <
&trans        &trans        &trans     &trans          &trans  &kp K_REDO  &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &trans      &kp LEFT     &kp UP         &kp DOWN     &kp RIGHT
&trans        &trans        &trans     &trans          &trans  &trans      &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                            &trans     &trans          &trans  &mkp RCLK   &mkp LCLK    &mkp MCLK
            >;
        };

        media {
            bindings = <
&trans        &trans        &trans     &trans          &trans  &kp K_REDO        &kp K_PASTE      &kp K_COPY         &kp K_CUT        &kp K_UNDO
&kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &trans            &kp K_PREV       &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp K_NEXT
&trans        &trans        &trans     &trans          &trans  &trans            &kp HOME         &kp PAGE_DOWN      &kp PAGE_UP      &kp END
                            &trans     &trans          &trans  &kp C_PLAY_PAUSE  &kp PAUSE_BREAK  &kp K_MUTE
            >;
        };

        num {
            bindings = <
&mt LEFT_PARENTHESIS LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8      &kp NUMBER_9  &mt RIGHT_PARENTHESIS RIGHT_BRACKET  &trans  &trans           &trans     &trans         &trans
&kp SEMICOLON                      &kp NUMBER_4  &kp NUMBER_5      &kp NUMBER_6  &kp EQUAL                            &trans  &kp RIGHT_SHIFT  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp GRAVE                          &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &kp BACKSLASH                        &trans  &trans           &trans     &trans         &trans
                                                 &kp GREATER_THAN  &kp NUMBER_0  &kp MINUS                            &trans  &trans           &trans
            >;
        };

        sym {
            bindings = <
&kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE  &trans  &trans           &trans     &trans         &trans
&kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS         &trans  &kp RIGHT_SHIFT  &kp LCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &trans  &trans           &trans     &trans         &trans
                                 &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS        &trans  &trans           &trans
            >;
        };

        fun_layer {
            bindings = <
&tog 0        &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG  &trans  &kp F7  &kp F8  &kp F9  &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &trans        &trans  &kp F1  &kp F2  &kp F3  &kp F10
                            &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };
    };
};
